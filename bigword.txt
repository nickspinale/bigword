-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fixed-size bit-vectors
--   
--   Fixed-size bit-vectors as wrapped Integers, using GHC.TypeLits.
--   Inspired by the largeword package by Dominic Steinitz.
@package bigword
@version 0.1.0.0


-- | Core types and operations of the package.
module Data.Word.N.Core

-- | Type representing a sequence of <tt>n</tt> bits, or a non-negative
--   integer smaller than <tt>2^n</tt>.
data W (n :: Nat)

-- | Synonym for readability
type BothKnown n = (KnownNat n, KnownNat (2 ^ n))

-- | Synonym for readability
type Triplet m n o = (BothKnown m, BothKnown n, BothKnown o, (m + n) ~ o)

-- | Appends two <tt><a>W</a></tt>'s, treating the first's bits as more
--   significant.
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   fromHostAddress6 :: HostAddress6 -&gt; W 128
--   fromHostAddress6 (a, b, c, d) = f a &gt;+&lt; f b &gt;+&lt; f c &gt;+&lt; f d
--     where
--       f = fromIntegral :: Word32 -&gt; W 32
--   </pre>
(>+<) :: Triplet m n o => W m -> W n -> W o

-- | The inverse of <tt><a>&gt;+&lt;</a></tt>
--   
--   <pre>
--   forall a b. split (a &gt;+&lt; b) == (a, b)
--   </pre>
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   toHostAddress6 :: W 128 -&gt; HostAddress6
--   toHostAddress6 w =  (f a, f b, f c, f d)
--     where
--       f = fromIntegral :: W 32 -&gt; Word32
--       (a, x) = split w
--       (b, y) = split x
--       (c, d) = split y
--   </pre>
split :: Triplet m n o => W o -> (W m, W n)
instance Text.Printf.PrintfArg (Data.Word.N.Core.W n)
instance GHC.Arr.Ix (Data.Word.N.Core.W n)
instance GHC.Classes.Ord (Data.Word.N.Core.W n)
instance GHC.Enum.Enum (Data.Word.N.Core.W n)
instance GHC.Classes.Eq (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Real.Integral (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Real.Real (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Enum.Bounded (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Num.Num (Data.Word.N.Core.W n)
instance (Data.Typeable.Internal.Typeable n, Data.Typeable.Internal.Typeable (2 GHC.TypeLits.^ n)) => Data.Data.Data (Data.Word.N.Core.W n)
instance GHC.Show.Show (Data.Word.N.Core.W n)
instance GHC.Read.Read (Data.Word.N.Core.W n)
instance Data.Word.N.Core.BothKnown n => Data.Bits.Bits (Data.Word.N.Core.W n)
instance Data.Word.N.Core.BothKnown n => Data.Bits.FiniteBits (Data.Word.N.Core.W n)


-- | Classes for converting to and from the <tt><a>W</a> n</tt> type.
--   <tt><a>ToW</a></tt> and <tt><a>FromW</a></tt> interpret the leftmost
--   members of tuples as the most significant.
module Data.Word.N.Conversion

-- | Provides a way to convert from fixed-bit types to the <tt><a>W</a>
--   n</tt> type.
class ToW n a | a -> n
toW :: ToW n a => a -> W n

-- | Provides a way to convert from the <tt><a>W</a> n</tt> type to
--   fixed-bit types.
class FromW n a | a -> n
fromW :: FromW n a => W n -> a

-- | Convenience constraint synonym. Tuple instances of <tt><a>ToW</a></tt>
--   and <tt><a>FromW</a></tt> would be a lot uglier without it.
instance Data.Word.N.Conversion.ToW n (Data.Word.N.Core.W n)
instance Data.Word.N.Conversion.ToW 8 GHC.Word.Word8
instance Data.Word.N.Conversion.ToW 16 GHC.Word.Word16
instance Data.Word.N.Conversion.ToW 32 GHC.Word.Word32
instance Data.Word.N.Conversion.ToW 64 GHC.Word.Word64
instance Data.Word.N.Conversion.ToW 8 GHC.Int.Int8
instance Data.Word.N.Conversion.ToW 16 GHC.Int.Int16
instance Data.Word.N.Conversion.ToW 32 GHC.Int.Int32
instance Data.Word.N.Conversion.ToW 64 GHC.Int.Int64
instance Data.Word.N.Conversion.FromW n (Data.Word.N.Core.W n)
instance Data.Word.N.Conversion.FromW 8 GHC.Word.Word8
instance Data.Word.N.Conversion.FromW 16 GHC.Word.Word16
instance Data.Word.N.Conversion.FromW 32 GHC.Word.Word32
instance Data.Word.N.Conversion.FromW 64 GHC.Word.Word64
instance Data.Word.N.Conversion.FromW 8 GHC.Int.Int8
instance Data.Word.N.Conversion.FromW 16 GHC.Int.Int16
instance Data.Word.N.Conversion.FromW 32 GHC.Int.Int32
instance Data.Word.N.Conversion.FromW 64 GHC.Int.Int64
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.AccSums '[n0, n1], n ~ Data.Type.List.Sum '[n0, n1]) => Data.Word.N.Conversion.ToW n (a0, a1)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.AccSums '[n0, n1, n2], n ~ Data.Type.List.Sum '[n0, n1, n2]) => Data.Word.N.Conversion.ToW n (a0, a1, a2)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.ToW n3 a3, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3], n ~ Data.Type.List.Sum '[n0, n1, n2, n3]) => Data.Word.N.Conversion.ToW n (a0, a1, a2, a3)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.ToW n3 a3, Data.Word.N.Conversion.ToW n4 a4, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4]) => Data.Word.N.Conversion.ToW n (a0, a1, a2, a3, a4)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.ToW n3 a3, Data.Word.N.Conversion.ToW n4 a4, Data.Word.N.Conversion.ToW n5 a5, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5]) => Data.Word.N.Conversion.ToW n (a0, a1, a2, a3, a4, a5)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.ToW n3 a3, Data.Word.N.Conversion.ToW n4 a4, Data.Word.N.Conversion.ToW n5 a5, Data.Word.N.Conversion.ToW n6 a6, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5, n6], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5, n6]) => Data.Word.N.Conversion.ToW n (a0, a1, a2, a3, a4, a5, a6)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.ToW n3 a3, Data.Word.N.Conversion.ToW n4 a4, Data.Word.N.Conversion.ToW n5 a5, Data.Word.N.Conversion.ToW n6 a6, Data.Word.N.Conversion.ToW n7 a7, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5, n6, n7], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5, n6, n7]) => Data.Word.N.Conversion.ToW n (a0, a1, a2, a3, a4, a5, a6, a7)
instance (Data.Word.N.Conversion.ToW n0 a0, Data.Word.N.Conversion.ToW n1 a1, Data.Word.N.Conversion.ToW n2 a2, Data.Word.N.Conversion.ToW n3 a3, Data.Word.N.Conversion.ToW n4 a4, Data.Word.N.Conversion.ToW n5 a5, Data.Word.N.Conversion.ToW n6 a6, Data.Word.N.Conversion.ToW n7 a7, Data.Word.N.Conversion.ToW n8 a8, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5, n6, n7, n8], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5, n6, n7, n8]) => Data.Word.N.Conversion.ToW n (a0, a1, a2, a3, a4, a5, a6, a7, a8)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.AccSums '[n0, n1], n ~ Data.Type.List.Sum '[n0, n1]) => Data.Word.N.Conversion.FromW n (a0, a1)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.AccSums '[n0, n1, n2], n ~ Data.Type.List.Sum '[n0, n1, n2]) => Data.Word.N.Conversion.FromW n (a0, a1, a2)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.FromW n3 a3, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3], n ~ Data.Type.List.Sum '[n0, n1, n2, n3]) => Data.Word.N.Conversion.FromW n (a0, a1, a2, a3)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.FromW n3 a3, Data.Word.N.Conversion.FromW n4 a4, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4]) => Data.Word.N.Conversion.FromW n (a0, a1, a2, a3, a4)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.FromW n3 a3, Data.Word.N.Conversion.FromW n4 a4, Data.Word.N.Conversion.FromW n5 a5, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5]) => Data.Word.N.Conversion.FromW n (a0, a1, a2, a3, a4, a5)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.FromW n3 a3, Data.Word.N.Conversion.FromW n4 a4, Data.Word.N.Conversion.FromW n5 a5, Data.Word.N.Conversion.FromW n6 a6, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5, n6], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5, n6]) => Data.Word.N.Conversion.FromW n (a0, a1, a2, a3, a4, a5, a6)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.FromW n3 a3, Data.Word.N.Conversion.FromW n4 a4, Data.Word.N.Conversion.FromW n5 a5, Data.Word.N.Conversion.FromW n6 a6, Data.Word.N.Conversion.FromW n7 a7, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5, n6, n7], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5, n6, n7]) => Data.Word.N.Conversion.FromW n (a0, a1, a2, a3, a4, a5, a6, a7)
instance (Data.Word.N.Conversion.FromW n0 a0, Data.Word.N.Conversion.FromW n1 a1, Data.Word.N.Conversion.FromW n2 a2, Data.Word.N.Conversion.FromW n3 a3, Data.Word.N.Conversion.FromW n4 a4, Data.Word.N.Conversion.FromW n5 a5, Data.Word.N.Conversion.FromW n6 a6, Data.Word.N.Conversion.FromW n7 a7, Data.Word.N.Conversion.FromW n8 a8, Data.Word.N.Conversion.AccSums '[n0, n1, n2, n3, n4, n5, n6, n7, n8], n ~ Data.Type.List.Sum '[n0, n1, n2, n3, n4, n5, n6, n7, n8]) => Data.Word.N.Conversion.FromW n (a0, a1, a2, a3, a4, a5, a6, a7, a8)


-- | Fixed size bit vectors using type-level naturals.
module Data.Word.N

-- | Type representing a sequence of <tt>n</tt> bits, or a non-negative
--   integer smaller than <tt>2^n</tt>.
data W (n :: Nat)

-- | Appends two <tt><a>W</a></tt>'s, treating the first's bits as more
--   significant.
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   fromHostAddress6 :: HostAddress6 -&gt; W 128
--   fromHostAddress6 (a, b, c, d) = f a &gt;+&lt; f b &gt;+&lt; f c &gt;+&lt; f d
--     where
--       f = fromIntegral :: Word32 -&gt; W 32
--   </pre>
(>+<) :: Triplet m n o => W m -> W n -> W o

-- | The inverse of <tt><a>&gt;+&lt;</a></tt>
--   
--   <pre>
--   forall a b. split (a &gt;+&lt; b) == (a, b)
--   </pre>
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   toHostAddress6 :: W 128 -&gt; HostAddress6
--   toHostAddress6 w =  (f a, f b, f c, f d)
--     where
--       f = fromIntegral :: W 32 -&gt; Word32
--       (a, x) = split w
--       (b, y) = split x
--       (c, d) = split y
--   </pre>
split :: Triplet m n o => W o -> (W m, W n)

-- | Synonym for readability
type BothKnown n = (KnownNat n, KnownNat (2 ^ n))

-- | Synonym for readability
type Triplet m n o = (BothKnown m, BothKnown n, BothKnown o, (m + n) ~ o)

-- | Convenience constraint synonym. Tuple instances of <tt><a>ToW</a></tt>
--   and <tt><a>FromW</a></tt> would be a lot uglier without it.

-- | Provides a way to convert from fixed-bit types to the <tt><a>W</a>
--   n</tt> type.
class ToW n a | a -> n
toW :: ToW n a => a -> W n

-- | Provides a way to convert from the <tt><a>W</a> n</tt> type to
--   fixed-bit types.
class FromW n a | a -> n
fromW :: FromW n a => W n -> a


-- | Useful functions for working with <tt><a>W</a> n</tt>'s.
module Data.Word.N.Util
slice :: (Triplet n o no, Triplet m no mno) => Proxy o -> W mno -> W n

-- | Reads "d divides n", and allows for generic construction and
--   inpsection.
class (KnownNat d, KnownNat n) => (:|:) d n

-- | Construct an applicative action that results in a <tt><a>W</a> n</tt>
--   from one that results in a <tt><a>W</a> d</tt>, where <tt>d | n</tt>.
--   See <a>assembleR</a> and <a>assembleL</a> for examples.
assemble :: ((:|:) d n, Applicative f) => (forall a b c. (Triplet a b c, Triplet b a c) => W a -> W b -> W c) -> f (W d) -> f (W n)

-- | Construct a means of pushing a <tt><a>W</a> n</tt> into a monoid from
--   a means of pushing a <tt><a>W</a> d</tt> into the monoid, where <tt>d
--   | n</tt>. See <a>disassembleR</a> and <a>disassembleL</a> for
--   examples.
disassemble :: ((:|:) d n, Monoid m) => (W d -> m) -> (W n -> m)

-- | Same as assembleR, but treats the first results as less significant.
--   
--   <pre>
--   assembleL = 'assemble' (flip ('&gt;+&lt;'))
--   </pre>
--   
--   Here's the example above, modified to parse in little-endian byte
--   order:
--   
--   <pre>
--   import Data.Attoparsec.ByteString
--   import Data.Word
--   
--   anyWord128LE :: Parser (W 128)
--   anyWord128LE = assembleL $ fmap (fromIntegral :: Word8 -&gt; W 8) anyWord8
--   </pre>
assembleL :: (Applicative f, d :|: n) => f (W d) -> f (W n)

-- | Transforms an applicative action that results in a <tt><a>W</a> d</tt>
--   to on that results in a <tt><a>W</a> n</tt>, provided that
--   <tt>d|n</tt> (hence the <tt>:|:</tt> constraint), treating the first
--   results as more significant.
--   
--   <pre>
--   assembleR = 'assemble' ('&gt;+&lt;')
--   </pre>
--   
--   Example using attoparsec to parse a big-endian unsigned 128-bit
--   integer:
--   
--   <pre>
--   import Data.Attoparsec.ByteString
--   import Data.Word
--   
--   anyWord128BE :: Parser (W 128)
--   anyWord128BE = assembleR $ fmap (fromIntegral :: Word8 -&gt; W 8) anyWord8
--   </pre>
assembleR :: (Applicative f, d :|: n) => f (W d) -> f (W n)

-- | Same as disassembleL, but combines less significant chunks first.
--   
--   <pre>
--   disassembleL f = getDual . disassemble (Dual . f)
--   </pre>
--   
--   <tt>disassembleR</tt>'s example adjusted to build in little-endian
--   byte order:
--   
--   <pre>
--   import Data.ByteString.Builder
--   
--   word128LE :: W 128 -&gt; Builder
--   word128LE = disassembleL (word8 . (fromIntegral :: W 8 -&gt; Word8))
--   </pre>
disassembleL :: (Monoid m, d :|: n) => (W d -> m) -> (W n -> m)

-- | Breaks a <tt><a>W</a> n</tt> into its constituent <tt>d</tt>-sized
--   chunks, and combines them according to the provided monoid. More
--   significant chunks are combined first.
--   
--   <pre>
--   disassembleR = disassemble
--   </pre>
--   
--   Example using a bytestrings
--   
--   <pre>
--   import Data.ByteString.Builder
--   
--   word128BE :: W 128 -&gt; Builder
--   word128BE = disassembleR (word8 . (fromIntegral :: W 8 -&gt; Word8))
--   </pre>
disassembleR :: (Monoid m, d :|: n) => (W d -> m) -> (W n -> m)

-- | Displays a bitvector's bits in big-endian order.
showBits :: (1 :|: n) => W n -> String

-- | Displays a bitvector's bits in big-endian order, in groups of four as
--   hexadecimal digits.
showHex :: (4 :|: n) => W n -> String
instance (eq ~ (d Data.Type.Equality.== n), Data.Word.N.Util.Divides eq d n) => d Data.Word.N.Util.:|: n
instance (GHC.TypeLits.KnownNat d, GHC.TypeLits.KnownNat n, 'GHC.Types.True ~ (d Data.Type.Equality.== n), d ~ n) => Data.Word.N.Util.Divides 'GHC.Types.True d n
instance (Data.Word.N.Core.Triplet d n' n, Data.Word.N.Core.Triplet n' d n, Data.Word.N.Util.Divides (d Data.Type.Equality.== n') d n', 'GHC.Types.False ~ (d Data.Type.Equality.== n)) => Data.Word.N.Util.Divides 'GHC.Types.False d n


-- | Provides a church-encoding means of inspecting and constructing
--   bit-vectors. This module is currenty a work in progress.
module Data.Word.N.Church

-- | <tt><a>Fn</a></tt> is not injective, but <tt><a>Fun</a></tt> is, which
--   is necessary for type decidability. However, this abstraction is not
--   easily optimized away by GHC, so this will soon change.

-- | Class for nonempty type-level lists of <tt><a>Nat</a></tt>'s. This is
--   the core of the heterogeneous-church-encoded-vector-like interface.
class Church (list :: [Nat])

-- | Given components, return their concatenation.
construct :: Church list => Fun list (Wof list)

-- | Operate on a bit-vector component-wise, where the size of its
--   components are determined by <tt>list</tt>.
inspect :: Church list => Fun list result -> Wof list -> result

-- | Type synonym for readability. Constructs a the type of functions from
--   the pattern of <tt><a>W</a></tt>'s specified by <tt>list</tt> to
--   <tt>result</tt>.
type Fn list result = Foldr (->) result (Map W list)

-- | Type synonym for readability
type Wof list = W (Sum list)

-- | Constraint synonym for readablility
type ListSum (n :: Nat) (ns :: [Nat]) = Triplet n (Sum ns) (n + Sum ns)
instance GHC.Base.Functor (Data.Word.N.Church.Fun '[])
instance GHC.Base.Functor (Data.Word.N.Church.Fun xs) => GHC.Base.Functor (Data.Word.N.Church.Fun (x : xs))
instance Data.Word.N.Church.Church '[n]
instance (Data.Word.N.Church.ListSum m (n : ns), GHC.Base.Functor (Data.Word.N.Church.Fun ns), Data.Word.N.Church.Church (n : ns)) => Data.Word.N.Church.Church (m : n : ns)
