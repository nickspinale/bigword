-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package bigword
@version 0.1.0.0


-- | Core types and operations of the package.
module Data.Word.N.Core

-- | Type representing a sequence of <tt>n</tt> bits, or a non-negative
--   integer smaller than <tt>2^n</tt>.
data W (n :: Nat)

-- | Appends two <tt><a>W</a></tt>'s, treating the first's bits as more
--   significant.
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   fromHostAddress6 :: HostAddress6 -&gt; W 128
--   fromHostAddress6 (a, b, c, d) = f a &gt;+&lt; f b &gt;+&lt; f c &gt;+&lt; f d
--     where
--       f = fromIntegral :: Word32 -&gt; W 32
--   </pre>
(>+<) :: (KnownNat (2 ^ m), KnownNat (2 ^ n), KnownNat (2 ^ o), KnownNat m, KnownNat n, KnownNat o, o ~ (m + n), o ~ (n + m)) => W m -> W n -> W o

-- | The inverse of <tt><a>&gt;+&lt;</a></tt>
--   
--   <pre>
--   forall a b. split (a &gt;+&lt; b) == (a, b)
--   </pre>
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   toHostAddress6 :: W 128 -&gt; HostAddress6
--   toHostAddress6 w =  (f a, f b, f c, f d)
--     where
--       f = fromIntegral :: W 32 -&gt; Word32
--       (a, x) = split w
--       (b, y) = split x
--       (c, d) = split y
--   </pre>
split :: (KnownNat m, KnownNat n, KnownNat o, KnownNat (2 ^ m), KnownNat (2 ^ n), KnownNat (2 ^ o), o ~ (m + n)) => W o -> (W m, W n)
instance Text.Printf.PrintfArg (Data.Word.N.Core.W n)
instance GHC.Arr.Ix (Data.Word.N.Core.W n)
instance GHC.Classes.Ord (Data.Word.N.Core.W n)
instance GHC.Enum.Enum (Data.Word.N.Core.W n)
instance GHC.Classes.Eq (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Real.Integral (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Real.Real (Data.Word.N.Core.W n)
instance (Data.Typeable.Internal.Typeable n, Data.Typeable.Internal.Typeable (2 GHC.TypeLits.^ n)) => Data.Data.Data (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Enum.Bounded (Data.Word.N.Core.W n)
instance GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n) => GHC.Num.Num (Data.Word.N.Core.W n)
instance (GHC.TypeLits.KnownNat n, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n)) => GHC.Show.Show (Data.Word.N.Core.W n)
instance (GHC.TypeLits.KnownNat n, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n)) => GHC.Read.Read (Data.Word.N.Core.W n)
instance (GHC.TypeLits.KnownNat n, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n)) => Data.Bits.Bits (Data.Word.N.Core.W n)
instance (GHC.TypeLits.KnownNat n, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n)) => Data.Bits.FiniteBits (Data.Word.N.Core.W n)


-- | Classes for converting to and from the <tt><a>W</a> n</tt> type.
module Data.Word.N.Conversion

-- | Provides a way to convert from fixed-bit types to the <tt><a>W</a>
--   n</tt> type.
class ToW (n :: Nat) (a :: *) | a -> n
toW :: ToW n a => a -> W n

-- | Provides a way to convert from the <tt><a>W</a> n</tt> type to
--   fixed-bit types.
class FromW (n :: Nat) (a :: *) | a -> n
fromW :: FromW n a => a -> W n

-- | Wrapper for tuples. <tt><a>ToW</a></tt> and <tt><a>FromW</a></tt>
--   interpret the leftmost members of such tuples as the most significant.
newtype BigEndian a
BigEndian :: a -> BigEndian a
[fromBigEndian] :: BigEndian a -> a

-- | Wrapper for tuples. <tt><a>ToW</a></tt> and <tt><a>FromW</a></tt>
--   interpret the rightmost members of such tuples as the most
--   significant.
newtype LittleEndian a
LittleEndian :: a -> LittleEndian a
[fromLittleEndian] :: LittleEndian a -> a
instance Data.Word.N.Conversion.ToW n (Data.Word.N.Core.W n)
instance Data.Word.N.Conversion.ToW 8 GHC.Word.Word8
instance Data.Word.N.Conversion.ToW 16 GHC.Word.Word16
instance Data.Word.N.Conversion.ToW 32 GHC.Word.Word32
instance Data.Word.N.Conversion.ToW 64 GHC.Word.Word64
instance Data.Word.N.Conversion.ToW 8 GHC.Int.Int8
instance Data.Word.N.Conversion.ToW 16 GHC.Int.Int16
instance Data.Word.N.Conversion.ToW 32 GHC.Int.Int32
instance Data.Word.N.Conversion.ToW 64 GHC.Int.Int64
instance Data.Word.N.Conversion.FromW n (Data.Word.N.Core.W n)
instance Data.Word.N.Conversion.FromW 8 GHC.Word.Word8
instance Data.Word.N.Conversion.FromW 16 GHC.Word.Word16
instance Data.Word.N.Conversion.FromW 32 GHC.Word.Word32
instance Data.Word.N.Conversion.FromW 64 GHC.Word.Word64
instance Data.Word.N.Conversion.FromW 8 GHC.Int.Int8
instance Data.Word.N.Conversion.FromW 16 GHC.Int.Int16
instance Data.Word.N.Conversion.FromW 32 GHC.Int.Int32
instance Data.Word.N.Conversion.FromW 64 GHC.Int.Int64


-- | Instances of <tt><a>ToW</a></tt> and <tt><a>FromW</a></tt> for tuples.
module Data.Word.N.TupleInstances
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1)) => Data.Word.N.Conversion.ToW n01 (Data.Word.N.Conversion.BigEndian (a0, a1))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2)) => Data.Word.N.Conversion.ToW n012 (Data.Word.N.Conversion.BigEndian (a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3)) => Data.Word.N.Conversion.ToW n0123 (Data.Word.N.Conversion.BigEndian (a3, a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4)) => Data.Word.N.Conversion.ToW n01234 (Data.Word.N.Conversion.BigEndian (a4, a3, a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5)) => Data.Word.N.Conversion.ToW n012345 (Data.Word.N.Conversion.BigEndian (a5, a4, a3, a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), n0123456 ~ (n012345 GHC.TypeLits.+ n6), n0123456 ~ (n6 GHC.TypeLits.+ n012345), GHC.TypeLits.KnownNat n0123456, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123456), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5), Data.Word.N.Conversion.ToW n6 a6, GHC.TypeLits.KnownNat n6, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n6)) => Data.Word.N.Conversion.ToW n0123456 (Data.Word.N.Conversion.BigEndian (a6, a5, a4, a3, a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), n0123456 ~ (n012345 GHC.TypeLits.+ n6), n0123456 ~ (n6 GHC.TypeLits.+ n012345), GHC.TypeLits.KnownNat n0123456, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123456), n01234567 ~ (n0123456 GHC.TypeLits.+ n7), n01234567 ~ (n7 GHC.TypeLits.+ n0123456), GHC.TypeLits.KnownNat n01234567, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234567), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5), Data.Word.N.Conversion.ToW n6 a6, GHC.TypeLits.KnownNat n6, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n6), Data.Word.N.Conversion.ToW n7 a7, GHC.TypeLits.KnownNat n7, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n7)) => Data.Word.N.Conversion.ToW n01234567 (Data.Word.N.Conversion.BigEndian (a7, a6, a5, a4, a3, a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), n0123456 ~ (n012345 GHC.TypeLits.+ n6), n0123456 ~ (n6 GHC.TypeLits.+ n012345), GHC.TypeLits.KnownNat n0123456, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123456), n01234567 ~ (n0123456 GHC.TypeLits.+ n7), n01234567 ~ (n7 GHC.TypeLits.+ n0123456), GHC.TypeLits.KnownNat n01234567, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234567), n012345678 ~ (n01234567 GHC.TypeLits.+ n8), n012345678 ~ (n8 GHC.TypeLits.+ n01234567), GHC.TypeLits.KnownNat n012345678, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345678), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5), Data.Word.N.Conversion.ToW n6 a6, GHC.TypeLits.KnownNat n6, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n6), Data.Word.N.Conversion.ToW n7 a7, GHC.TypeLits.KnownNat n7, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n7), Data.Word.N.Conversion.ToW n8 a8, GHC.TypeLits.KnownNat n8, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n8)) => Data.Word.N.Conversion.ToW n012345678 (Data.Word.N.Conversion.BigEndian (a8, a7, a6, a5, a4, a3, a2, a1, a0))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1)) => Data.Word.N.Conversion.ToW n01 (Data.Word.N.Conversion.LittleEndian (a0, a1))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2)) => Data.Word.N.Conversion.ToW n012 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3)) => Data.Word.N.Conversion.ToW n0123 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2, a3))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4)) => Data.Word.N.Conversion.ToW n01234 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2, a3, a4))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5)) => Data.Word.N.Conversion.ToW n012345 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2, a3, a4, a5))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), n0123456 ~ (n012345 GHC.TypeLits.+ n6), n0123456 ~ (n6 GHC.TypeLits.+ n012345), GHC.TypeLits.KnownNat n0123456, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123456), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5), Data.Word.N.Conversion.ToW n6 a6, GHC.TypeLits.KnownNat n6, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n6)) => Data.Word.N.Conversion.ToW n0123456 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2, a3, a4, a5, a6))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), n0123456 ~ (n012345 GHC.TypeLits.+ n6), n0123456 ~ (n6 GHC.TypeLits.+ n012345), GHC.TypeLits.KnownNat n0123456, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123456), n01234567 ~ (n0123456 GHC.TypeLits.+ n7), n01234567 ~ (n7 GHC.TypeLits.+ n0123456), GHC.TypeLits.KnownNat n01234567, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234567), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5), Data.Word.N.Conversion.ToW n6 a6, GHC.TypeLits.KnownNat n6, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n6), Data.Word.N.Conversion.ToW n7 a7, GHC.TypeLits.KnownNat n7, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n7)) => Data.Word.N.Conversion.ToW n01234567 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2, a3, a4, a5, a6, a7))
instance (n01 ~ (n0 GHC.TypeLits.+ n1), n01 ~ (n1 GHC.TypeLits.+ n0), GHC.TypeLits.KnownNat n01, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01), n012 ~ (n01 GHC.TypeLits.+ n2), n012 ~ (n2 GHC.TypeLits.+ n01), GHC.TypeLits.KnownNat n012, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012), n0123 ~ (n012 GHC.TypeLits.+ n3), n0123 ~ (n3 GHC.TypeLits.+ n012), GHC.TypeLits.KnownNat n0123, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123), n01234 ~ (n0123 GHC.TypeLits.+ n4), n01234 ~ (n4 GHC.TypeLits.+ n0123), GHC.TypeLits.KnownNat n01234, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234), n012345 ~ (n01234 GHC.TypeLits.+ n5), n012345 ~ (n5 GHC.TypeLits.+ n01234), GHC.TypeLits.KnownNat n012345, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345), n0123456 ~ (n012345 GHC.TypeLits.+ n6), n0123456 ~ (n6 GHC.TypeLits.+ n012345), GHC.TypeLits.KnownNat n0123456, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0123456), n01234567 ~ (n0123456 GHC.TypeLits.+ n7), n01234567 ~ (n7 GHC.TypeLits.+ n0123456), GHC.TypeLits.KnownNat n01234567, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n01234567), n012345678 ~ (n01234567 GHC.TypeLits.+ n8), n012345678 ~ (n8 GHC.TypeLits.+ n01234567), GHC.TypeLits.KnownNat n012345678, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n012345678), Data.Word.N.Conversion.ToW n0 a0, GHC.TypeLits.KnownNat n0, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n0), Data.Word.N.Conversion.ToW n1 a1, GHC.TypeLits.KnownNat n1, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n1), Data.Word.N.Conversion.ToW n2 a2, GHC.TypeLits.KnownNat n2, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n2), Data.Word.N.Conversion.ToW n3 a3, GHC.TypeLits.KnownNat n3, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n3), Data.Word.N.Conversion.ToW n4 a4, GHC.TypeLits.KnownNat n4, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n4), Data.Word.N.Conversion.ToW n5 a5, GHC.TypeLits.KnownNat n5, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n5), Data.Word.N.Conversion.ToW n6 a6, GHC.TypeLits.KnownNat n6, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n6), Data.Word.N.Conversion.ToW n7 a7, GHC.TypeLits.KnownNat n7, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n7), Data.Word.N.Conversion.ToW n8 a8, GHC.TypeLits.KnownNat n8, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n8)) => Data.Word.N.Conversion.ToW n012345678 (Data.Word.N.Conversion.LittleEndian (a0, a1, a2, a3, a4, a5, a6, a7, a8))


-- | Fixed size bit vectors using type-level naturals.
module Data.Word.N

-- | Type representing a sequence of <tt>n</tt> bits, or a non-negative
--   integer smaller than <tt>2^n</tt>.
data W (n :: Nat)

-- | Appends two <tt><a>W</a></tt>'s, treating the first's bits as more
--   significant.
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   fromHostAddress6 :: HostAddress6 -&gt; W 128
--   fromHostAddress6 (a, b, c, d) = f a &gt;+&lt; f b &gt;+&lt; f c &gt;+&lt; f d
--     where
--       f = fromIntegral :: Word32 -&gt; W 32
--   </pre>
(>+<) :: (KnownNat (2 ^ m), KnownNat (2 ^ n), KnownNat (2 ^ o), KnownNat m, KnownNat n, KnownNat o, o ~ (m + n), o ~ (n + m)) => W m -> W n -> W o

-- | The inverse of <tt><a>&gt;+&lt;</a></tt>
--   
--   <pre>
--   forall a b. split (a &gt;+&lt; b) == (a, b)
--   </pre>
--   
--   Example usage:
--   
--   <pre>
--   import Network.Socket
--   
--   toHostAddress6 :: W 128 -&gt; HostAddress6
--   toHostAddress6 w =  (f a, f b, f c, f d)
--     where
--       f = fromIntegral :: W 32 -&gt; Word32
--       (a, x) = split w
--       (b, y) = split x
--       (c, d) = split y
--   </pre>
split :: (KnownNat m, KnownNat n, KnownNat o, KnownNat (2 ^ m), KnownNat (2 ^ n), KnownNat (2 ^ o), o ~ (m + n)) => W o -> (W m, W n)

-- | Provides a way to convert from fixed-bit types to the <tt><a>W</a>
--   n</tt> type.
class ToW (n :: Nat) (a :: *) | a -> n
toW :: ToW n a => a -> W n

-- | Provides a way to convert from the <tt><a>W</a> n</tt> type to
--   fixed-bit types.
class FromW (n :: Nat) (a :: *) | a -> n
fromW :: FromW n a => a -> W n

-- | Wrapper for tuples. <tt><a>ToW</a></tt> and <tt><a>FromW</a></tt>
--   interpret the leftmost members of such tuples as the most significant.
newtype BigEndian a
BigEndian :: a -> BigEndian a
[fromBigEndian] :: BigEndian a -> a

-- | Wrapper for tuples. <tt><a>ToW</a></tt> and <tt><a>FromW</a></tt>
--   interpret the rightmost members of such tuples as the most
--   significant.
newtype LittleEndian a
LittleEndian :: a -> LittleEndian a
[fromLittleEndian] :: LittleEndian a -> a


-- | Useful functions for working with <tt><a>W</a> n</tt>'s.
module Data.Word.N.Util
slice :: (no ~ (n + o), mno ~ (m + no), KnownNat mno, KnownNat no, KnownNat m, KnownNat n, KnownNat o, KnownNat (2 ^ mno), KnownNat (2 ^ no), KnownNat (2 ^ m), KnownNat (2 ^ n), KnownNat (2 ^ o)) => Proxy o -> W mno -> W n

-- | Reads "d divides n".
class (KnownNat d, KnownNat n) => (:|:) d n
assemble :: ((:|:) d n, Applicative f) => (forall a b c. (KnownNat a, KnownNat b, KnownNat c, KnownNat (2 ^ a), KnownNat (2 ^ b), KnownNat (2 ^ c), c ~ (a + b), c ~ (b + a)) => W a -> W b -> W c) -> f (W d) -> f (W n)
disassemble :: ((:|:) d n, Monoid m) => (W d -> m) -> (W n -> m)

-- | Same as assembleR, but treats the first results as less significant.
--   
--   Example using attoparsec to parse a little-endian unsigned 128-bit
--   integer:
--   
--   <pre>
--   import Data.Attoparsec.ByteString
--   import Data.Word
--   
--   anyWord128LE :: Parser (W 128)
--   anyWord128LE = assembleL $ fmap (fromIntegral :: Word8 -&gt; W 8) anyWord8
--   </pre>
assembleL :: (Applicative f, d :|: n) => f (W d) -> f (W n)

-- | Transforms an applicative action that results in a <tt><a>W</a> d</tt>
--   to on that results in a <tt><a>W</a> n</tt>, provided that
--   <tt>d|n</tt> (hence the <tt>:|:</tt> constraint), treating the first
--   results as more significant.
--   
--   Here's the example above, modified to parse in network-byte order:
--   
--   <pre>
--   anyWord128BE :: Parser (W 128)
--   anyWord128BE = assembleR $ fmap (fromIntegral :: Word8 -&gt; W 8) anyWord8
--   </pre>
assembleR :: (Applicative f, d :|: n) => f (W d) -> f (W n)

-- | Same as disassembleL, but combines less significant chunks first.
--   
--   Example using a bytestrings
--   
--   <pre>
--   import Data.ByteString.Builder
--   
--   word128LE :: W 128 -&gt; Builder
--   word128LE = disassembleL (word8 . (fromIntegral :: W 8 -&gt; Word8))
--   </pre>
disassembleL :: (Monoid m, d :|: n) => (W d -> m) -> (W n -> m)

-- | Breaks a <tt><a>W</a> n</tt> into its constituent <tt>d</tt>-sized
--   chunks, and combines them according to the provided monoid. More
--   significant chunks are combined first.
--   
--   <tt>disassembleL</tt>'s example adjusted to build in network-byte
--   order:
--   
--   <pre>
--   import Data.ByteString.Builder
--   
--   word128BE :: W 128 -&gt; Builder
--   word128BE = disassembleR (word8 . (fromIntegral :: W 8 -&gt; Word8))
--   </pre>
disassembleR :: (Monoid m, d :|: n) => (W d -> m) -> (W n -> m)
showBits :: (1 :|: n) => W n -> String
showHex :: (4 :|: n) => W n -> String
instance (eq ~ (d Data.Type.Equality.== n), Data.Word.N.Util.Divides eq d n) => d Data.Word.N.Util.:|: n
instance (GHC.TypeLits.KnownNat d, GHC.TypeLits.KnownNat n, 'GHC.Types.True ~ (d Data.Type.Equality.== n), d ~ n) => Data.Word.N.Util.Divides 'GHC.Types.True d n
instance (GHC.TypeLits.KnownNat n, GHC.TypeLits.KnownNat n', GHC.TypeLits.KnownNat d, GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n), GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ n'), GHC.TypeLits.KnownNat (2 GHC.TypeLits.^ d), Data.Word.N.Util.Divides (d Data.Type.Equality.== n') d n', 'GHC.Types.False ~ (d Data.Type.Equality.== n), n ~ (d GHC.TypeLits.+ n'), n ~ (n' GHC.TypeLits.+ d)) => Data.Word.N.Util.Divides 'GHC.Types.False d n
